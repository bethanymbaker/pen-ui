<project name="sf" default="compile" basedir=".">

  <property name="shortName" value="sf" />
  <property name="prog" value="org.six11.sf.Main" />
  <property name="build.dir" value="build" />
  <property name="compile.output.dir" value="${build.dir}/classes" />
  <property name="compile.src.dir" value="src" />
  <property name="compile.debug" value="true" />
  <property name="compile.deprecation" value="true" />
  <property name="compile.optimize" value="false" />
  <property name="javadoc.output.dir" value="${build.dir}/docs" />
  <property name="jar.output" value="${build.dir}/${shortName}.jar" />

  <!-- ==================== Compilation Classpath =========================== -->

  <path id="compile.classpath">
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset> 
    <fileset dir="external">
      <include name="*.jar"/>
    </fileset> 
  </path>

  <taskdef classpathref="compile.classpath" resource="genjar.properties" />
  <taskdef classpathref="compile.classpath" resource="proguard/ant/task.properties" />

  <!-- ==================== All Target ====================================== -->

  <target name="all" depends="clean,compile"
	  description="Clean build and dist directories, then compile"/>

  <!-- ==================== Prepare Target ================================== -->

  <target name="prepare">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${compile.output.dir}" />
    <mkdir dir="${javadoc.output.dir}" />
  </target>

  <!-- ==================== Clean Target ==================================== -->

  <target name="clean"
	  description="Delete old class files and backup source files">
    <delete failonerror="false" >
      <fileset defaultexcludes="no" dir="${compile.output.dir}" includes="**/*.class"/>
      <fileset defaultexcludes="no" dir="${compile.src.dir}" includes="**/*~"/>
    </delete>
    <delete dir="${build.dir}" failonerror="false" />
  </target>

  <!-- ==================== Jar Target ====================================== -->
  
  <target name="jar"
	  depends="compile">
    <echo message="Using directory: ${compile.output.dir}" />
    <!--
	<genjar jarfile="${jar.output}">
	  <class name="org.six11.sf.Main"/>
	  <classpath>
	    <fileset dir="lib">
	      <include name="*.jar" />
	    </fileset>
	    <pathelement path="${compile.output.dir}" />
	  </classpath>
	  <manifest>
	    <attribute name="Main-Class" value="org/six11/sf/Main" />
	  </manifest>
	</genjar>  
	-->
    <jar destfile="${build.dir}/${shortName}-fat.jar">
      <fileset dir="${compile.output.dir}" />
      <manifest>
	<attribute name="Main-Class" value="${prog}" />
      </manifest>
    </jar>

    <proguard>
      -libraryjars ${java.home}/lib/rt.jar
      -libraryjars lib/junit-4.1.jar
      -injars      lib/json.jar(!META-INF/MANIFEST.MF)
      -injars      lib/imgscalr-lib-4.0.jar(!META-INF/MANIFEST.MF)
      -injars      lib/Jama-1.0.2.jar(!META-INF/MANIFEST.MF)
      -injars      lib/jdom.jar(!META-INF/MANIFEST.MF)
      -injars      lib/six11utils.jar(!META-INF/MANIFEST.MF)
      -injars      lib/iText-2.1.4.jar(!META-INF/MANIFEST.MF)
      -injars      external/jogl.all.jar(!META-INF/MANIFEST.MF)
      -injars      external/gluegen-rt.jar(!META-INF/MANIFEST.MF)
      -injars      build/${shortName}-fat.jar <!-- my code. keep the manifest -->
      -outjars     build/${shortName}.jar
<!--      -skipnonpubliclibraryclasses -->
      -dontoptimize
      -dontobfuscate
      -dontpreverify
      -dontwarn com.lowagie.**
      -dontwarn org.jdom.**
      -dontwarn java.**
      -dontwarn javax.**
      -dontnote com.lowagie.**
      -dontnote org.jdom.**
      -dontwarn jogamp.**
      -dontwarn com.jogamp.**
      
      -keep public class org.six11.sf.Main {
        public static void main(java.lang.String[]);
      }
    </proguard>
  </target>

  <target name="jarBundle" depends="jar" description="Builds SIMI.app">
    <taskdef name="jarbundler"
	     classpath="lib/jarbundler-2.1.0.jar" 
	     classname="net.sourceforge.jarbundler.JarBundler"/>
    <jarbundler dir="${build.dir}" verbose="true" showPlist="true"
	        name="Sketch It, Make It"
	        mainclass="org.six11.sf.Main"
	        jar="${jar.output}"
	        icon="icons/simi.icns"
	        version="0.1"
		vmoptions="-Djava.library.path=osx"
	    	arguments=""
	    	bundleid="org.six11.sf" 
	    	jvmversion="1.6+">
      <resourcefileset dir="external" includes="osx/*.jnilib"/>
  </jarbundler>
  </target>

  <!-- ==================== Compile Target
  ================================== -->

  <target name="compile"
	  depends="prepare"
	  description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${compile.output.dir}" />
    <javac srcdir="${compile.src.dir}"
           destdir="${compile.output.dir}"
           debug="${compile.debug}"
	   deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           source="1.5">
      <classpath refid="compile.classpath" />
      <include name="**/*.java" />
    </javac>

  </target>


  <!-- ==================== Run Target ===================================== -->

  <target name="run"
	  description="Runs arbitrary code using this project's classpath"
	  depends="compile">
    <java fork="yes" classname="${prog}">
      <arg value="${args}" />
      <classpath refid="compile.classpath" />
      <classpath path="${compile.output.dir}" />
    </java>
  </target>

  <!-- Use Target: will run org.six11.sf.${prog} -->
  <target name="use"
	  description="Runs an executable in the org.six11.sf package"
	  depends="compile">
    <java fork="yes" classname="org.six11.sf.Main">
      <arg value="${args}" />
      <classpath refid="compile.classpath" />
      <classpath path="${compile.output.dir}" />
    </java>
  </target>

  

  <!-- ==================== Javadoc Target ================================== -->

  <target name="javadoc" depends="compile, javadoc.checkProperties"
	  description="Create Javadoc API documentation">

    <mkdir dir="${javadoc.output.dir}"/>
    <javadoc sourcepath="${compile.src.dir}"
             destdir="${javadoc.output.dir}"
	     additionalparam="${breakIterIf14}"
             packagenames="*"
             source="1.5">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

  <target name="javadoc.private" depends="compile, javadoc.checkProperties"
	  description="Create Javadoc for internal use (includes private items)">

    <mkdir dir="${javadoc.output.dir}"/>
    <javadoc sourcepath="${compile.src.dir}"
             destdir="${javadoc.output.dir}"
	     additionalparam="${breakIterIf14}"
             packagenames="*"
	     access="private">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>
  
  <target name="javadoc.checkProperties"
     description="Sees if we need to use -breakiterator when generating javadoc">
    <condition property="breakIterIf14" value="-breakiterator">
      <equals arg1="1.4" arg2="${ant.java.version}"/>
    </condition>
    <condition property="breakIterIf14" value="">
      <not>
        <equals arg1="1.4" arg2="${ant.java.version}"/>
      </not>
    </condition>
  </target>

</project>
